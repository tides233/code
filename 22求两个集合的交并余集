//题目地址：
//http://oj.nuaa.edu.cn/contest/32/problem/1

//账号162210424
//密码add225007

//实验密码1622

#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>


void paixu(int* p, int n,int flag)
{
	int i, j, k,t;
	for (i = 0,k=0; i < n; i++,k++)
	{
		for (j = 0; j < n - k - 1; j++)
		{
			if (flag)//1为升序
			{
				if (*(p + j) > *(p + j + 1))
				{
					t = *(p + j);
					*(p + j) = *(p + j + 1);
					*(p + j + 1) = t;
				}
			}
			else//0为降序
			{
				if (*(p + j) < *(p + j + 1))
				{
					t = *(p + j);
					*(p + j) = *(p + j + 1);
					*(p + j + 1) = t;
				}
			}
		}
	}
}


int jiaoji(int* a, int* b, int m, int n, int* p)
{
	int i, j, k = 0;
	for (i = 0; i < m; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (*(a + i) == *(b + j))
			{
				*(p + k) = *(a + i);
				k++;
				break;
			}
		}
	}
	n = k;
	paixu(p, n,1);
	for (i = 0; i < n; i++)
	{
		printf("%d ", *(p + i));
	}
	return n;//返回交集的元素个数，此时n不是原来的n
}


void bingji(int* a, int* b, int m, int n, int* p,int min)//这里的p为并集
{
	/*min = 1;*/  //将min置为1可测试min-1=0，下同
	int i, j, t = 0, k = 0, count = 0;
	for (i = 0; i < m; i++)
	{
		*(p + i) = *(a + i);
	}
	for (j = 0; j < n; j++, i++)
	{
		*(p + i) = *(b + j);
	}//前两次循环把两个集合存进第三个集合

	paixu(p, m + n,0);//第一次降序,使两个相同的数并在一起

	for (i = 0; i < n + m-1; i++)//逐对逐对进行比较，两个一样的，把后面置为min-1，min为原先两个集合中的最小值
	{
		if (*(p + i) == *(p + i + 1))
		{
			*(p + i + 1) = min-1;
			count++;//count为置为min-1的元素个数
		}
	}
	paixu(p, m + n,0);//第二次降序，把值为min-1的置为最后count个元素
	paixu(p, m + n-count,1);//对前除去最后count个元素的元素升序
	for (i = 0; i < n + m - count; i++)
	{
		printf("%d ", *(p + i));
	}
}


void yuji(int* a, int* p, int n, int N,int min)
{
	//min = 1;
	int i, j, k, t;
	for (i = 0; i < N; i++)
	{
		for (j = 0; j < n; j++)
		{
			if (*(p + i) == *(a + j))
			{
				*(a + j) = min-1;
				break;//将交集作为外循环，内循环中碰到与交集一样的置为min-1，然后break，进行下一个交集元素的比较
			}
		}
	}
	paixu(a, n,0);//降序
	paixu(a, n - N,1);//升序
	for (i = 0; i < n - N; i++)
	{
		if (i == 0)
		{
			printf("%d", *(a + i));//第一个只打印%d，此后只打印  空格+%d
		}
		else
		{
			printf(" %d", *(a + i));
		}
	}
}


int min(int* p, int n)//求某个集合中的最小数
{
	int i, min;
	min = *p;
	for (i = 0; i < n - 1; i++)
	{
		if (*(p+i)>*(p+i+1))
		{
			min = *(p + i + 1);
		}
	}
	return min;
}


int main()
{
	int m, n, i, N,MIN,min1,min2;
	scanf("%d", &m);
	int arr[1001] = { 0 };
	int ret[1001] = { 0 };
	int jiao[1001] = { 0 };
	int bing[2002] = { 0 };
	for (i = 0; i < m; i++)
	{
		scanf("%d", &arr[i]);
	}
	scanf("%d", &n);
	for (i = 0; i < n; i++)
	{
		scanf("%d", &ret[i]);
	}
	min1 = min(arr, m);
	min2 = min(ret, n);
	MIN = min1 < min2 ? min1 : min2;
	N = jiaoji(arr, ret, m, n, jiao);//N为交集元素个数
	printf("\n");
	bingji(arr, ret, m, n, bing,MIN);
	printf("\n");
	yuji(arr, jiao, n, N,MIN);
	return 0;
}
